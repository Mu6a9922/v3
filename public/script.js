// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ script.js');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let editingId = null;
let currentEditingType = null;
let currentSortField = null;
let currentSortDirection = 'asc';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    if (typeof NotificationManager === 'undefined') {
        console.error('‚ùå NotificationManager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return false;
    }
    
    if (typeof Database === 'undefined') {
        console.error('‚ùå Database –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return false;
    }
    
    console.log('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (!checkDependencies()) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
        return;
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        const isConnected = await db.checkConnection().catch(() => false);
        
        if (isConnected) {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            NotificationManager.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            NotificationManager.warning('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000.');
        }
        
        await updateStats();
        await renderCurrentTab();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function updateStats() {
    try {
        const stats = await db.getStats();
        document.getElementById('totalComputers').textContent = stats.computers || 0;
        document.getElementById('totalNetwork').textContent = stats.network || 0;
        document.getElementById('totalOther').textContent = stats.other || 0;
        document.getElementById('totalAssigned').textContent = stats.assigned || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('totalComputers').textContent = '0';
        document.getElementById('totalNetwork').textContent = '0';
        document.getElementById('totalOther').textContent = '0';
        document.getElementById('totalAssigned').textContent = '0';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function openTab(evt, tabName) {
    console.log('üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏:', tabName);
    
    try {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        const tabContents = document.getElementsByClassName("tab-content");
        for (let i = 0; i < tabContents.length; i++) {
            tabContents[i].classList.remove("active");
        }
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
        const tabButtons = document.getElementsByClassName("tab-button");
        for (let i = 0; i < tabButtons.length; i++) {
            tabButtons[i].classList.remove("active");
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(tabName).classList.add("active");
        evt.currentTarget.classList.add("active");
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        renderTabContent(tabName);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
async function renderTabContent(tabName) {
    console.log('üìÑ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏:', tabName);
    
    try {
        switch(tabName) {
            case 'computers':
                await filterComputers();
                break;
            case 'network':
                await filterNetworkDevices();
                break;
            case 'other':
                await filterOtherDevices();
                break;
            case 'assigned':
                await filterAssignedDevices();
                break;
            case 'ipaddresses':
                await renderIPAddressTable();
                break;
            case 'history':
                await renderHistory();
                break;
            default:
                console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞:', tabName);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
async function renderCurrentTab() {
    const activeTab = document.querySelector('.tab-content.active');
    if (activeTab) {
        await renderTabContent(activeTab.id);
    }
}

// === –†–ê–ë–û–¢–ê –° –ö–û–ú–ü–¨–Æ–¢–ï–†–ê–ú–ò ===

function renderComputerTable(data = []) {
    console.log('üíª –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –∑–∞–ø–∏—Å–µ–π:', data.length);
    
    const tbody = document.getElementById('computerTable');
    if (!tbody) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç computerTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    tbody.innerHTML = '';

    if (data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="12" style="text-align: center; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    data.forEach((computer, index) => {
        const statusClass = StatusManager ? StatusManager.getStatusClass(computer.status) : 'status-working';
        const statusText = StatusManager ? StatusManager.getStatusText(computer.status) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><strong>${escapeHtml(computer.inventoryNumber || '')}</strong></td>
                <td>${escapeHtml(computer.building || '')}</td>
                <td>${escapeHtml(computer.location || '')}</td>
                <td>${escapeHtml(computer.deviceType || '')}</td>
                <td>${escapeHtml(computer.model || '')}</td>
                <td>${escapeHtml(computer.processor || '')}</td>
                <td>${escapeHtml(computer.ram || '')}</td>
                <td>${escapeHtml(computer.ipAddress || '')}</td>
                <td>${escapeHtml(computer.computerName || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editComputer(${computer.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteComputer(${computer.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

async function filterComputers() {
    console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤...');
    
    try {
        const searchTerm = document.getElementById('computerSearchInput')?.value || '';
        const buildingFilter = document.getElementById('buildingFilter')?.value || '';
        const typeFilter = document.getElementById('typeFilter')?.value || '';
        const statusFilter = document.getElementById('statusFilter')?.value || '';

        let computers = await db.getByType('computers');

        // –ü–æ–∏—Å–∫
        if (searchTerm) {
            computers = computers.filter(computer => {
                const searchFields = [
                    computer.inventoryNumber || '',
                    computer.location || '',
                    computer.model || '',
                    computer.computerName || '',
                    computer.processor || '',
                    computer.ram || ''
                ];
                return searchFields.some(field => 
                    field.toLowerCase().includes(searchTerm.toLowerCase())
                );
            });
        }

        // –§–∏–ª—å—Ç—Ä—ã
        if (buildingFilter) {
            computers = computers.filter(c => c.building === buildingFilter);
        }
        if (typeFilter) {
            computers = computers.filter(c => c.deviceType === typeFilter);
        }
        if (statusFilter) {
            computers = computers.filter(c => c.status === statusFilter);
        }

        renderComputerTable(computers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:', error);
        renderComputerTable([]);
    }
}

function openComputerModal() {
    console.log('üíª –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
    
    try {
        editingId = null;
        currentEditingType = 'computer';
        document.getElementById('computerModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('computerForm');
        if (form) {
            form.reset();
        }
        document.getElementById('computerStatus').value = 'working';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        resetInventorySearch();
        
        document.getElementById('computerModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã');
    }
}

async function editComputer(id) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ID:', id);
    
    try {
        const computers = await db.getByType('computers');
        const computer = computers.find(c => c.id === id);
        
        if (!computer) {
            NotificationManager.error('–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        editingId = id;
        currentEditingType = 'computer';
        document.getElementById('computerModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('computerInventoryNumber').value = computer.inventoryNumber || '';
        document.getElementById('computerBuilding').value = computer.building || '';
        document.getElementById('computerLocation').value = computer.location || '';
        document.getElementById('computerDeviceType').value = computer.deviceType || '';
        document.getElementById('computerModel').value = computer.model || '';
        document.getElementById('computerProcessor').value = computer.processor || '';
        document.getElementById('computerRam').value = computer.ram || '';
        document.getElementById('computerStorage').value = computer.storage || '';
        document.getElementById('computerGraphics').value = computer.graphics || '';
        document.getElementById('computerIpAddress').value = computer.ipAddress || '';
        document.getElementById('computerName').value = computer.computerName || '';
        document.getElementById('computerYear').value = computer.year || '';
        document.getElementById('computerNotes').value = computer.notes || '';
        document.getElementById('computerStatus').value = computer.status || 'working';

        resetInventorySearch();
        document.getElementById('computerModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
    }
}

async function deleteComputer(id) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ID:', id);
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä?')) {
        try {
            await db.delete('computers', id);
            NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            await filterComputers();
            await updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
        }
    }
}

// === –†–ê–ë–û–¢–ê –° –°–ï–¢–ï–í–´–ú –û–ë–û–†–£–î–û–í–ê–ù–ò–ï–ú ===

function renderNetworkTable(data = []) {
    console.log('üåê –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∑–∞–ø–∏—Å–µ–π:', data.length);
    
    const tbody = document.getElementById('networkTable');
    if (!tbody) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç networkTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    tbody.innerHTML = '';

    if (data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="10" style="text-align: center; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    data.forEach((device, index) => {
        const statusClass = StatusManager ? StatusManager.getStatusClass(device.status) : 'status-working';
        const statusText = StatusManager ? StatusManager.getStatusText(device.status) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td>${escapeHtml(device.type || '')}</td>
                <td>${escapeHtml(device.model || '')}</td>
                <td>${escapeHtml(device.building || '')}</td>
                <td>${escapeHtml(device.location || '')}</td>
                <td>${escapeHtml(device.ipAddress || '')}</td>
                <td>${escapeHtml(device.login || '')}</td>
                <td>${escapeHtml(device.wifiName || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editNetworkDevice(${device.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteNetworkDevice(${device.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

async function filterNetworkDevices() {
    console.log('üåê –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    
    try {
        const searchTerm = document.getElementById('networkSearchInput')?.value || '';
        const buildingFilter = document.getElementById('networkBuildingFilter')?.value || '';
        const typeFilter = document.getElementById('networkTypeFilter')?.value || '';

        let devices = await db.getByType('networkDevices');

        // –ü–æ–∏—Å–∫
        if (searchTerm) {
            devices = devices.filter(device => {
                const searchFields = [
                    device.model || '',
                    device.ipAddress || '',
                    device.location || '',
                    device.wifiName || ''
                ];
                return searchFields.some(field => 
                    field.toLowerCase().includes(searchTerm.toLowerCase())
                );
            });
        }

        // –§–∏–ª—å—Ç—Ä—ã
        if (buildingFilter) {
            devices = devices.filter(d => d.building === buildingFilter);
        }
        if (typeFilter) {
            devices = devices.filter(d => d.type === typeFilter);
        }

        renderNetworkTable(devices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        renderNetworkTable([]);
    }
}

function openNetworkModal() {
    console.log('üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    
    try {
        editingId = null;
        currentEditingType = 'network';
        document.getElementById('networkModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('networkForm');
        if (form) {
            form.reset();
        }
        document.getElementById('networkStatus').value = 'working';
        
        document.getElementById('networkModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã');
    }
}

async function editNetworkDevice(id) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ID:', id);
    
    try {
        const devices = await db.getByType('networkDevices');
        const device = devices.find(d => d.id === id);
        
        if (!device) {
            NotificationManager.error('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        editingId = id;
        currentEditingType = 'network';
        document.getElementById('networkModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('networkType').value = device.type || '';
        document.getElementById('networkModel').value = device.model || '';
        document.getElementById('networkBuilding').value = device.building || '';
        document.getElementById('networkLocation').value = device.location || '';
        document.getElementById('networkIpAddress').value = device.ipAddress || '';
        document.getElementById('networkLogin').value = device.login || '';
        document.getElementById('networkPassword').value = device.password || '';
        document.getElementById('networkWifiName').value = device.wifiName || '';
        document.getElementById('networkWifiPassword').value = device.wifiPassword || '';
        document.getElementById('networkNotes').value = device.notes || '';
        document.getElementById('networkStatus').value = device.status || 'working';

        document.getElementById('networkModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
}

async function deleteNetworkDevice(id) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ID:', id);
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')) {
        try {
            await db.delete('networkDevices', id);
            NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            await filterNetworkDevices();
            await updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        }
    }
}

// === –†–ê–ë–û–¢–ê –° –î–†–£–ì–û–ô –¢–ï–•–ù–ò–ö–û–ô ===

function renderOtherTable(data = []) {
    console.log('üñ®Ô∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, –∑–∞–ø–∏—Å–µ–π:', data.length);
    
    const tbody = document.getElementById('otherTable');
    if (!tbody) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç otherTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    tbody.innerHTML = '';

    if (data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" style="text-align: center; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    data.forEach((device, index) => {
        const statusClass = StatusManager ? StatusManager.getStatusClass(device.status) : 'status-working';
        const statusText = StatusManager ? StatusManager.getStatusText(device.status) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td>${escapeHtml(device.type || '')}</td>
                <td>${escapeHtml(device.model || '')}</td>
                <td>${escapeHtml(device.building || '')}</td>
                <td>${escapeHtml(device.location || '')}</td>
                <td>${escapeHtml(device.responsible || '')}</td>
                <td>${escapeHtml(device.inventoryNumber || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editOtherDevice(${device.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteOtherDevice(${device.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

async function filterOtherDevices() {
    console.log('üñ®Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏');
    
    try {
        const searchTerm = document.getElementById('otherSearchInput')?.value || '';
        const buildingFilter = document.getElementById('otherBuildingFilter')?.value || '';
        const typeFilter = document.getElementById('otherTypeFilter')?.value || '';

        let devices = await db.getByType('otherDevices');

        // –ü–æ–∏—Å–∫
        if (searchTerm) {
            devices = devices.filter(device => {
                const searchFields = [
                    device.type || '',
                    device.model || '',
                    device.location || '',
                    device.responsible || '',
                    device.inventoryNumber || ''
                ];
                return searchFields.some(field => 
                    field.toLowerCase().includes(searchTerm.toLowerCase())
                );
            });
        }

        // –§–∏–ª—å—Ç—Ä—ã
        if (buildingFilter) {
            devices = devices.filter(d => d.building === buildingFilter);
        }
        if (typeFilter) {
            devices = devices.filter(d => d.type === typeFilter);
        }

        renderOtherTable(devices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏:', error);
        renderOtherTable([]);
    }
}

function openOtherModal() {
    console.log('üñ®Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏');
    
    try {
        editingId = null;
        currentEditingType = 'other';
        document.getElementById('otherModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('otherForm');
        if (form) {
            form.reset();
        }
        document.getElementById('otherStatus').value = 'working';
        
        document.getElementById('otherModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã');
    }
}

async function editOtherDevice(id) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ID:', id);
    
    try {
        const devices = await db.getByType('otherDevices');
        const device = devices.find(d => d.id === id);
        
        if (!device) {
            NotificationManager.error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        editingId = id;
        currentEditingType = 'other';
        document.getElementById('otherModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('otherType').value = device.type || '';
        document.getElementById('otherModel').value = device.model || '';
        document.getElementById('otherBuilding').value = device.building || '';
        document.getElementById('otherLocation').value = device.location || '';
        document.getElementById('otherResponsible').value = device.responsible || '';
        document.getElementById('otherInventoryNumber').value = device.inventoryNumber || '';
        document.getElementById('otherNotes').value = device.notes || '';
        document.getElementById('otherStatus').value = device.status || 'working';

        document.getElementById('otherModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
}

async function deleteOtherDevice(id) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ID:', id);
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')) {
        try {
            await db.delete('otherDevices', id);
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            await filterOtherDevices();
            await updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        }
    }
}

// === –†–ê–ë–û–¢–ê –° –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ú–ò –£–°–¢–†–û–ô–°–¢–í–ê–ú–ò ===

function renderAssignedTable(data = []) {
    console.log('üë§ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∑–∞–ø–∏—Å–µ–π:', data.length);
    
    const tbody = document.getElementById('assignedTable');
    if (!tbody) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç assignedTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    tbody.innerHTML = '';

    if (data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
        return;
    }

    data.forEach((assignment, index) => {
        const devicesText = Array.isArray(assignment.devices) 
            ? assignment.devices.join('; ') 
            : assignment.devices || '';

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><strong>${escapeHtml(assignment.employee || '')}</strong></td>
                <td>${escapeHtml(assignment.position || '')}</td>
                <td>${escapeHtml(assignment.building || '')}</td>
                <td style="max-width: 300px; word-wrap: break-word;">${escapeHtml(devicesText)}</td>
                <td>${DateUtils ? DateUtils.formatDate(assignment.assignedDate) : assignment.assignedDate || ''}</td>
                <td>
                    <button class="btn" onclick="editAssignment(${assignment.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteAssignment(${assignment.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

async function filterAssignedDevices() {
    console.log('üë§ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    
    try {
        const searchTerm = document.getElementById('assignedSearchInput')?.value || '';
        const buildingFilter = document.getElementById('assignedBuildingFilter')?.value || '';

        let assignments = await db.getByType('assignedDevices');

        // –ü–æ–∏—Å–∫
        if (searchTerm) {
            assignments = assignments.filter(assignment => {
                const devicesText = Array.isArray(assignment.devices) 
                    ? assignment.devices.join(' ') 
                    : assignment.devices || '';
                    
                const searchFields = [
                    assignment.employee || '',
                    assignment.position || '',
                    devicesText
                ];
                return searchFields.some(field => 
                    field.toLowerCase().includes(searchTerm.toLowerCase())
                );
            });
        }

        // –§–∏–ª—å—Ç—Ä—ã
        if (buildingFilter) {
            assignments = assignments.filter(a => a.building === buildingFilter);
        }

        renderAssignedTable(assignments);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        renderAssignedTable([]);
    }
}

function openAssignedModal() {
    console.log('üë§ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    
    try {
        editingId = null;
        currentEditingType = 'assigned';
        document.getElementById('assignedModalTitle').textContent = '–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.getElementById('assignedForm');
        if (form) {
            form.reset();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        document.getElementById('assignedDate').value = DateUtils ? DateUtils.getCurrentDate() : '';
        
        resetDeviceSearch();
        document.getElementById('assignedModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã');
    }
}

async function editAssignment(id) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID:', id);
    
    try {
        const assignments = await db.getByType('assignedDevices');
        const assignment = assignments.find(a => a.id === id);
        
        if (!assignment) {
            NotificationManager.error('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        editingId = id;
        currentEditingType = 'assigned';
        document.getElementById('assignedModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('assignedEmployee').value = assignment.employee || '';
        document.getElementById('assignedPosition').value = assignment.position || '';
        document.getElementById('assignedBuilding').value = assignment.building || '';
        document.getElementById('assignedDate').value = assignment.assignedDate || '';
        document.getElementById('assignedNotes').value = assignment.notes || '';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const devicesText = Array.isArray(assignment.devices) 
            ? assignment.devices.join('\n') 
            : assignment.devices || '';
        document.getElementById('assignedDevices').value = devicesText;

        resetDeviceSearch();
        document.getElementById('assignedModal').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
    }
}

async function deleteAssignment(id) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID:', id);
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?')) {
        try {
            await db.delete('assignedDevices', id);
            NotificationManager.success('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            await filterAssignedDevices();
            await updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        }
    }
}

// === –¢–ê–ë–õ–ò–¶–ê IP –ê–î–†–ï–°–û–í ===

async function renderIPAddressTable() {
    console.log('üåê –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã IP –∞–¥—Ä–µ—Å–æ–≤');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å IP –∞–¥—Ä–µ—Å–∞–º–∏
        const [computers, networkDevices] = await Promise.all([
            db.getByType('computers'),
            db.getByType('networkDevices')
        ]);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤
        const usedIPs = new Map();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
        computers.forEach(computer => {
            if (computer.ipAddress && computer.ipAddress.startsWith('192.168.100.')) {
                usedIPs.set(computer.ipAddress, {
                    type: computer.deviceType || '–ö–æ–º–ø—å—é—Ç–µ—Ä',
                    name: computer.computerName || computer.model || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    location: computer.location || '',
                    status: computer.status || 'working'
                });
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        networkDevices.forEach(device => {
            if (device.ipAddress && device.ipAddress.startsWith('192.168.100.')) {
                usedIPs.set(device.ipAddress, {
                    type: device.type || '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                    name: device.model || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    location: device.location || '',
                    status: device.status || 'working'
                });
            }
        });
        
        const tbody = document.getElementById('ipTable');
        if (!tbody) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç ipTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        tbody.innerHTML = '';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É IP –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç 192.168.100.1 –¥–æ 192.168.100.254
        for (let i = 1; i <= 254; i++) {
            const ip = `192.168.100.${i}`;
            const device = usedIPs.get(ip);
            
            let statusClass = 'status-free';
            let deviceInfo = '–°–≤–æ–±–æ–¥–µ–Ω';
            let typeInfo = '';
            let locationInfo = '';
            
            if (device) {
                statusClass = StatusManager ? StatusManager.getStatusClass(device.status) : 'status-working';
                deviceInfo = device.name;
                typeInfo = device.type;
                locationInfo = device.location;
            }
            
            tbody.innerHTML += `
                <tr class="${device ? 'ip-used' : 'ip-free'}">
                    <td>${i}</td>
                    <td><strong>${ip}</strong></td>
                    <td>${typeInfo}</td>
                    <td>${deviceInfo}</td>
                    <td>${locationInfo}</td>
                    <td><span class="status-badge ${statusClass}">${device ? (StatusManager ? StatusManager.getStatusText(device.status) : '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è') : '–°–≤–æ–±–æ–¥–µ–Ω'}</span></td>
                    <td>
                        ${device ? 
                            `<button class="btn" onclick="editDeviceByIP('${ip}')" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>` :
                            `<button class="btn btn-success" onclick="assignIP('${ip}')" style="font-size: 12px; padding: 5px 10px;" title="–ù–∞–∑–Ω–∞—á–∏—Ç—å">‚ûï</button>`
                        }
                    </td>
                </tr>
            `;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã IP –∞–¥—Ä–µ—Å–æ–≤:', error);
        const tbody = document.getElementById('ipTable');
        if (tbody) {
            tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 20px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
        }
    }
}

async function editDeviceByIP(ip) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ IP:', ip);
    
    try {
        // –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ IP
        const [computers, networkDevices] = await Promise.all([
            db.getByType('computers'),
            db.getByType('networkDevices')
        ]);
        
        let device = computers.find(c => c.ipAddress === ip);
        if (device) {
            await editComputer(device.id);
            return;
        }
        
        device = networkDevices.find(d => d.ipAddress === ip);
        if (device) {
            await editNetworkDevice(device.id);
            return;
        }
        
        NotificationManager.warning('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º IP –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ IP:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
}

function assignIP(ip) {
    console.log('‚ûï –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞:', ip);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const deviceType = prompt('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n1 - –ö–æ–º–ø—å—é—Ç–µ—Ä\n2 - –°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:');
    
    if (deviceType === '1') {
        openComputerModal();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º IP
        setTimeout(() => {
            document.getElementById('computerIpAddress').value = ip;
        }, 100);
    } else if (deviceType === '2') {
        openNetworkModal();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º IP
        setTimeout(() => {
            document.getElementById('networkIpAddress').value = ip;
        }, 100);
    }
}

// === –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
async function renderHistory() {
    console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');

    try {
        const history = await db.getHistory();
        const tbody = document.getElementById('historyTable');
        if (!tbody) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç historyTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        tbody.innerHTML = '';

        history.forEach((item, index) => {
            tbody.innerHTML += `
                <tr>
                    <td>${index + 1}</td>
                    <td>${escapeHtml(item.table)}</td>
                    <td>${item.deviceId}</td>
                    <td>${escapeHtml(item.action)}</td>
                    <td>${new Date(item.timestamp).toLocaleString()}</td>
                </tr>
            `;
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–û–†–ú ===

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
async function handleComputerSubmit(e) {
    e.preventDefault();
    console.log('üíæ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');

    try {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            inventoryNumber: document.getElementById('computerInventoryNumber').value.trim(),
            building: document.getElementById('computerBuilding').value,
            location: document.getElementById('computerLocation').value.trim(),
            deviceType: document.getElementById('computerDeviceType').value,
            model: document.getElementById('computerModel').value.trim(),
            processor: document.getElementById('computerProcessor').value.trim(),
            ram: document.getElementById('computerRam').value.trim(),
            storage: document.getElementById('computerStorage').value.trim(),
            graphics: document.getElementById('computerGraphics').value.trim(),
            ipAddress: document.getElementById('computerIpAddress').value.trim(),
            computerName: document.getElementById('computerName').value.trim(),
            year: document.getElementById('computerYear').value.trim(),
            notes: document.getElementById('computerNotes').value.trim(),
            status: document.getElementById('computerStatus').value
        };

        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const errors = [];
        if (!formData.building) errors.push('–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.location) errors.push('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        if (!formData.deviceType) errors.push('–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');

        if (errors.length > 0) {
            console.error('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
            NotificationManager.error(errors.join('\n'));
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (formData.ipAddress && !Validator.isValidIP(formData.ipAddress)) {
            NotificationManager.warning('IP-–∞–¥—Ä–µ—Å –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        }

        if (editingId && currentEditingType === 'computer') {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ID:', editingId);
            await db.update('computers', editingId, formData);
            NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
            const result = await db.add('computers', formData);
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', result);
            NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        await filterComputers();
        await updateStats();
        closeModal('computerModal');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
async function handleNetworkSubmit(e) {
    e.preventDefault();
    console.log('üíæ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');

    try {
        const formData = {
            type: document.getElementById('networkType').value,
            model: document.getElementById('networkModel').value.trim(),
            building: document.getElementById('networkBuilding').value,
            location: document.getElementById('networkLocation').value.trim(),
            ipAddress: document.getElementById('networkIpAddress').value.trim(),
            login: document.getElementById('networkLogin').value.trim(),
            password: document.getElementById('networkPassword').value.trim(),
            wifiName: document.getElementById('networkWifiName').value.trim(),
            wifiPassword: document.getElementById('networkWifiPassword').value.trim(),
            notes: document.getElementById('networkNotes').value.trim(),
            status: document.getElementById('networkStatus').value
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const errors = [];
        if (!formData.type) errors.push('–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.model) errors.push('–ú–æ–¥–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        if (!formData.building) errors.push('–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.location) errors.push('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        if (!formData.ipAddress) errors.push('IP-–∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');

        if (errors.length > 0) {
            NotificationManager.error(errors.join('\n'));
            return;
        }

        if (!Validator.isValidIP(formData.ipAddress)) {
            NotificationManager.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞');
            return;
        }

        if (editingId && currentEditingType === 'network') {
            await db.update('networkDevices', editingId, formData);
            NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            await db.add('networkDevices', formData);
            NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        await filterNetworkDevices();
        await updateStats();
        closeModal('networkModal');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
async function handleOtherSubmit(e) {
    e.preventDefault();
    console.log('üíæ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏');

    try {
        const formData = {
            type: document.getElementById('otherType').value,
            model: document.getElementById('otherModel').value.trim(),
            building: document.getElementById('otherBuilding').value,
            location: document.getElementById('otherLocation').value.trim(),
            responsible: document.getElementById('otherResponsible').value.trim(),
            inventoryNumber: document.getElementById('otherInventoryNumber').value.trim(),
            notes: document.getElementById('otherNotes').value.trim(),
            status: document.getElementById('otherStatus').value
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const errors = [];
        if (!formData.type) errors.push('–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.model) errors.push('–ú–æ–¥–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        if (!formData.building) errors.push('–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.location) errors.push('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');

        if (errors.length > 0) {
            NotificationManager.error(errors.join('\n'));
            return;
        }

        if (editingId && currentEditingType === 'other') {
            await db.update('otherDevices', editingId, formData);
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            await db.add('otherDevices', formData);
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        await filterOtherDevices();
        await updateStats();
        closeModal('otherModal');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
async function handleAssignedSubmit(e) {
    e.preventDefault();
    console.log('üíæ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');

    try {
        const devicesText = document.getElementById('assignedDevices').value.trim();
        const devices = devicesText.split('\n').filter(line => line.trim() !== '');

        const formData = {
            employee: document.getElementById('assignedEmployee').value.trim(),
            position: document.getElementById('assignedPosition').value.trim(),
            building: document.getElementById('assignedBuilding').value,
            devices: devices,
            assignedDate: document.getElementById('assignedDate').value,
            notes: document.getElementById('assignedNotes').value.trim()
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const errors = [];
        if (!formData.employee) errors.push('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        if (!formData.position) errors.push('–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        if (!formData.building) errors.push('–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        if (!formData.assignedDate) errors.push('–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        if (devices.length === 0) errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');

        if (errors.length > 0) {
            NotificationManager.error(errors.join('\n'));
            return;
        }

        if (editingId && currentEditingType === 'assigned') {
            await db.update('assignedDevices', editingId, formData);
            NotificationManager.success('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            await db.add('assignedDevices', formData);
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ');
        }

        await filterAssignedDevices();
        await updateStats();
        closeModal('assignedModal');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

// === –†–ê–ë–û–¢–ê –° –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===

async function showImportedData() {
    console.log('üëÅÔ∏è –ü–æ–∫–∞–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    try {
        const importedData = await db.getImportedComputers();
        console.log('üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', importedData);
        
        if (importedData.length === 0) {
            NotificationManager.info('–ù–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
        renderComputerTable(importedData);
        NotificationManager.info(`–ü–æ–∫–∞–∑–∞–Ω–æ ${importedData.length} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
}

async function migrateImportedData() {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    if (!confirm('–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤?')) {
        return;
    }
    
    try {
        NotificationManager.info('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö...');
        
        const result = await db.migrateImportedData();
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:', result);
        
        if (result.success) {
            let message = `–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${result.migratedCount} –∏–∑ ${result.totalImported} –∑–∞–ø–∏—Å–µ–π`;
            
            if (result.errors && result.errors.length > 0) {
                message += ` —Å ${result.errors.length} –æ—à–∏–±–∫–∞–º–∏`;
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', result.errors);
            }
            
            NotificationManager.success(message);
            await filterComputers(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            await updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
}

async function exportData(type) {
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞:', type);
    NotificationManager.info(`–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: ${type}`);
    
    try {
        // –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
        const data = await db.getByType(type === 'computers' ? 'computers' : type);
        
        const filename = `${type}_${new Date().toISOString().split('T')[0]}.json`;
        const dataStr = JSON.stringify(data, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.click();
        URL.revokeObjectURL(url);
        
        NotificationManager.success(`–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${filename}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
}

async function exportToExcel(type) {
    console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ç–∏–ø–∞:', type);
    NotificationManager.info(`–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel: ${type} (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

async function importComputers(event) {
    console.log('üì• –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤');
    
    const file = event.target.files[0];
    if (!file) {
        console.log('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }

    console.log('üìÑ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', {
        name: file.name,
        size: file.size,
        type: file.type
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
        'application/vnd.ms-excel', // .xls
        'application/octet-stream'
    ];

    const isValidType = allowedTypes.includes(file.type) || 
                       file.name.toLowerCase().endsWith('.xlsx') || 
                       file.name.toLowerCase().endsWith('.xls');

    if (!isValidType) {
        NotificationManager.error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª');
        event.target.value = '';
        return;
    }

    try {
        NotificationManager.info('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const result = await db.importFromExcel(file);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:', result);
        
        if (result.success) {
            let message = `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π`;
            
            if (result.totalRows) {
                message += ` –∏–∑ ${result.totalRows} —Å—Ç—Ä–æ–∫`;
            }
            
            if (result.warnings && result.warnings.length > 0) {
                console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', result.warnings);
                
                if (result.warningCount) {
                    message += ` —Å ${result.warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`;
                } else {
                    message += ` —Å ${result.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
                console.log('üìù –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:');
                result.warnings.forEach((warning, index) => {
                    console.log(`${index + 1}. ${warning}`);
                });
            }
            
            NotificationManager.success(message);
            await filterComputers();
            await updateStats();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', result.error);
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ' + result.error);
        }
    } catch (error) {
        console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: ' + error.message);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input
    event.target.value = '';
}

// === –ü–û–ò–°–ö –ü–û –ò–ù–í–ï–ù–¢–ê–†–ù–û–ú–£ –ù–û–ú–ï–†–£ ===

async function searchByInventoryNumber() {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É');
    
    const inventoryNumber = document.getElementById('inventorySearchInput')?.value?.trim();
    if (!inventoryNumber) {
        NotificationManager.warning('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä');
        return;
    }

    try {
        const result = await db.findByInventoryNumber(inventoryNumber);
        const searchBox = document.getElementById('inventorySearchBox');
        const infoElement = document.getElementById('autoFillInfo');

        if (result) {
            searchBox.className = 'inventory-search inventory-found';
            infoElement.textContent = `‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${result.data.model || result.data.type || '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}`;
            
            fillComputerFormFromData(result.data);
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        } else {
            searchBox.className = 'inventory-search inventory-not-found';
            infoElement.textContent = `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º "${inventoryNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`;
            
            document.getElementById('computerInventoryNumber').value = inventoryNumber;
            NotificationManager.warning('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
}

async function searchDeviceByInventoryNumber() {
    console.log('üîç –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É');
    
    const inventoryNumber = document.getElementById('deviceSearchInput')?.value?.trim();
    if (!inventoryNumber) {
        NotificationManager.warning('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        return;
    }

    try {
        const result = await db.findByInventoryNumber(inventoryNumber);
        const searchBox = document.getElementById('deviceSearchBox');
        const infoElement = document.getElementById('deviceAutoFillInfo');

        if (result) {
            searchBox.className = 'inventory-search inventory-found';
            const deviceName = result.data.model || result.data.type || '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
            infoElement.textContent = `‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${deviceName}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫
            const devicesTextarea = document.getElementById('assignedDevices');
            const currentDevices = devicesTextarea.value.trim();
            const newDevice = `${deviceName} (${inventoryNumber})`;
            
            if (currentDevices) {
                devicesTextarea.value = currentDevices + '\n' + newDevice;
            } else {
                devicesTextarea.value = newDevice;
            }
            
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫');
            document.getElementById('deviceSearchInput').value = '';
        } else {
            searchBox.className = 'inventory-search inventory-not-found';
            infoElement.textContent = `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º "${inventoryNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            NotificationManager.warning('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
}

function fillComputerFormFromData(data) {
    document.getElementById('computerInventoryNumber').value = data.inventoryNumber || '';
    document.getElementById('computerLocation').value = data.location || '';
    document.getElementById('computerDeviceType').value = data.deviceType || '';
    document.getElementById('computerModel').value = data.model || '';
    document.getElementById('computerProcessor').value = data.processor || '';
    document.getElementById('computerRam').value = data.ram || '';
    document.getElementById('computerStorage').value = data.storage || '';
    document.getElementById('computerGraphics').value = data.graphics || '';
    document.getElementById('computerYear').value = data.year || '';
    
    if (data.building) {
        document.getElementById('computerBuilding').value = data.building;
    } else {
        document.getElementById('computerBuilding').value = '–≥–ª–∞–≤–Ω—ã–π';
    }
}

function resetInventorySearch() {
    const searchBox = document.getElementById('inventorySearchBox');
    const infoElement = document.getElementById('autoFillInfo');
    const searchInput = document.getElementById('inventorySearchInput');
    
    if (searchBox) searchBox.className = 'inventory-search';
    if (infoElement) infoElement.textContent = '–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π';
    if (searchInput) searchInput.value = '';
}

function resetDeviceSearch() {
    const searchBox = document.getElementById('deviceSearchBox');
    const infoElement = document.getElementById('deviceAutoFillInfo');
    const searchInput = document.getElementById('deviceSearchInput');
    
    if (searchBox) searchBox.className = 'inventory-search';
    if (infoElement) infoElement.textContent = '–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è';
    if (searchInput) searchInput.value = '';
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===

function closeModal(modalId) {
    console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', modalId);
    
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
    
    editingId = null;
    currentEditingType = null;
    resetInventorySearch();
    resetDeviceSearch();
}

// === –£–¢–ò–õ–ò–¢–´ ===

function escapeHtml(str) {
    if (!str) return '';
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// === –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô ===

function setupEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ü–æ–∏—Å–∫–æ–≤—ã–µ –ø–æ–ª—è
    const searchInputs = ['computerSearchInput', 'networkSearchInput', 'otherSearchInput', 'assignedSearchInput'];
    searchInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input) {
            input.addEventListener('input', debounce(() => {
                if (inputId === 'computerSearchInput') filterComputers();
                else if (inputId === 'networkSearchInput') filterNetworkDevices();
                else if (inputId === 'otherSearchInput') filterOtherDevices();
                else if (inputId === 'assignedSearchInput') filterAssignedDevices();
            }, 300));
        }
    });

    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    const computerFilters = ['buildingFilter', 'typeFilter', 'statusFilter'];
    computerFilters.forEach(filterId => {
        const filter = document.getElementById(filterId);
        if (filter) {
            filter.addEventListener('change', () => filterComputers());
        }
    });

    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const networkFilters = ['networkBuildingFilter', 'networkTypeFilter'];
    networkFilters.forEach(filterId => {
        const filter = document.getElementById(filterId);
        if (filter) {
            filter.addEventListener('change', () => filterNetworkDevices());
        }
    });

    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
    const otherFilters = ['otherBuildingFilter', 'otherTypeFilter'];
    otherFilters.forEach(filterId => {
        const filter = document.getElementById(filterId);
        if (filter) {
            filter.addEventListener('change', () => filterOtherDevices());
        }
    });

    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const assignedFilters = ['assignedBuildingFilter'];
    assignedFilters.forEach(filterId => {
        const filter = document.getElementById(filterId);
        if (filter) {
            filter.addEventListener('change', () => filterAssignedDevices());
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    const forms = [
        { id: 'computerForm', handler: handleComputerSubmit },
        { id: 'networkForm', handler: handleNetworkSubmit },
        { id: 'otherForm', handler: handleOtherSubmit },
        { id: 'assignedForm', handler: handleAssignedSubmit }
    ];

    forms.forEach(({ id, handler }) => {
        const form = document.getElementById(id);
        if (form) {
            form.addEventListener('submit', handler);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã ${id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        } else {
            console.warn(`‚ö†Ô∏è –§–æ—Ä–º–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        const modals = ['computerModal', 'networkModal', 'otherModal', 'assignedModal'];
        modals.forEach(modalId => {
            const modal = document.getElementById(modalId);
            if (event.target === modal) {
                closeModal(modalId);
            }
        });
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.openTab = openTab;
window.openComputerModal = openComputerModal;
window.openNetworkModal = openNetworkModal;
window.openOtherModal = openOtherModal;
window.openAssignedModal = openAssignedModal;
window.editComputer = editComputer;
window.deleteComputer = deleteComputer;
window.editNetworkDevice = editNetworkDevice;
window.deleteNetworkDevice = deleteNetworkDevice;
window.editOtherDevice = editOtherDevice;
window.deleteOtherDevice = deleteOtherDevice;
window.editAssignment = editAssignment;
window.deleteAssignment = deleteAssignment;
window.editDeviceByIP = editDeviceByIP;
window.assignIP = assignIP;
window.closeModal = closeModal;
window.exportData = exportData;
window.exportToExcel = exportToExcel;
window.importComputers = importComputers;
window.searchByInventoryNumber = searchByInventoryNumber;
window.searchDeviceByInventoryNumber = searchDeviceByInventoryNumber;
window.showImportedData = showImportedData;
window.migrateImportedData = migrateImportedData;

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.initApp = initializeApp;
window.checkDeps = checkDependencies;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    setTimeout(async function() {
        await initializeApp();
        setupEventListeners();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
        const testFunctions = ['openTab', 'openComputerModal', 'openNetworkModal', 'openOtherModal', 'openAssignedModal'];
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:');
        testFunctions.forEach(funcName => {
            console.log(`${funcName}: ${typeof window[funcName]}`);
        });
        
    }, 500);
});

console.log('‚úÖ script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');