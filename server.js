const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const multer = require('multer');
const XLSX = require('xlsx');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'equipment_management',
    charset: 'utf8mb4',
    acquireTimeout: 60000,
    timeout: 60000
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
let pool = null;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞
async function createPool() {
    try {
        pool = mysql.createPool({
            ...dbConfig,
            waitForConnections: true,
            connectionLimit: 10,
            queueLimit: 0
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const connection = await pool.getConnection();
        await connection.ping();
        connection.release();
        
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:', error.message);
        console.log('üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('   - MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö equipment_management —Å–æ–∑–¥–∞–Ω–∞');
        console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
    if (!pool) {
        console.log('‚ö†Ô∏è –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î');
        return false;
    }
    
    try {
        const connection = await pool.getConnection();
        
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS computers (
                id INT AUTO_INCREMENT PRIMARY KEY,
                inventory_number VARCHAR(100),
                building ENUM('–≥–ª–∞–≤–Ω—ã–π', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π') NOT NULL,
                location VARCHAR(255) NOT NULL,
                device_type ENUM('–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '–Ω–µ—Ç–±—É–∫') NOT NULL,
                model VARCHAR(255),
                processor VARCHAR(255),
                ram VARCHAR(255),
                storage VARCHAR(255),
                graphics VARCHAR(255),
                ip_address VARCHAR(45),
                computer_name VARCHAR(255),
                year VARCHAR(10),
                notes TEXT,
                status ENUM('working', 'issues', 'broken') DEFAULT 'working',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_inventory (inventory_number),
                INDEX idx_building (building),
                INDEX idx_status (status)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS network_devices (
                id INT AUTO_INCREMENT PRIMARY KEY,
                type ENUM('—Ä–æ—É—Ç–µ—Ä', '—Å–≤–∏—Ç—á', '—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞') NOT NULL,
                model VARCHAR(255) NOT NULL,
                building ENUM('–≥–ª–∞–≤–Ω—ã–π', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π') NOT NULL,
                location VARCHAR(255) NOT NULL,
                ip_address VARCHAR(45) NOT NULL,
                login VARCHAR(255),
                password VARCHAR(255),
                wifi_name VARCHAR(255),
                wifi_password VARCHAR(255),
                notes TEXT,
                status ENUM('working', 'issues', 'broken') DEFAULT 'working',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_building (building),
                INDEX idx_type (type),
                INDEX idx_status (status)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS other_devices (
                id INT AUTO_INCREMENT PRIMARY KEY,
                type ENUM('–ø—Ä–∏–Ω—Ç–µ—Ä', '–ø—Ä–æ–µ–∫—Ç–æ—Ä', '–º–æ–Ω–∏—Ç–æ—Ä', '–ú–§–£', '–¥—Ä—É–≥–æ–µ') NOT NULL,
                model VARCHAR(255) NOT NULL,
                building ENUM('–≥–ª–∞–≤–Ω—ã–π', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π') NOT NULL,
                location VARCHAR(255) NOT NULL,
                responsible VARCHAR(255),
                inventory_number VARCHAR(100),
                notes TEXT,
                status ENUM('working', 'issues', 'broken') DEFAULT 'working',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_inventory (inventory_number),
                INDEX idx_building (building),
                INDEX idx_type (type),
                INDEX idx_status (status)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS assigned_devices (
                id INT AUTO_INCREMENT PRIMARY KEY,
                employee VARCHAR(255) NOT NULL,
                position VARCHAR(255) NOT NULL,
                building ENUM('–≥–ª–∞–≤–Ω—ã–π', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π') NOT NULL,
                devices TEXT NOT NULL,
                assigned_date DATE NOT NULL,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_building (building),
                INDEX idx_employee (employee),
                INDEX idx_assigned_date (assigned_date)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS imported_computers (
                id INT AUTO_INCREMENT PRIMARY KEY,
                inventory_number VARCHAR(100),
                location VARCHAR(255),
                device_type VARCHAR(100),
                model VARCHAR(255),
                screen VARCHAR(50),
                os VARCHAR(255),
                processor VARCHAR(255),
                cores VARCHAR(50),
                ram VARCHAR(255),
                storage VARCHAR(255),
                graphics VARCHAR(255),
                year VARCHAR(10),
                building ENUM('–≥–ª–∞–≤–Ω—ã–π', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π') DEFAULT '–≥–ª–∞–≤–Ω—ã–π',
                status ENUM('working', 'issues', 'broken') DEFAULT 'working',
                imported_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_inventory (inventory_number)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS device_history (
                id INT AUTO_INCREMENT PRIMARY KEY,
                device_table VARCHAR(50) NOT NULL,
                device_id INT NOT NULL,
                action VARCHAR(50) NOT NULL,
                details TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_table (device_table),
                INDEX idx_device (device_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);

        connection.release();
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º
function getStatusFromNotes(notes) {
    if (!notes || notes.trim() === '') return 'working';
    
    const notesLower = notes.toLowerCase();
    const brokenKeywords = ['–Ω–µ–∏—Å–ø—Ä–∞–≤', '—Å–ª–æ–º–∞–Ω', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–ª–æ–º–∫–∞', 'broken'];
    const issuesKeywords = ['–ø—Ä–æ–±–ª–µ–º', '–º–µ–¥–ª–µ–Ω–Ω', '—Ç—Ä–µ–±—É–µ—Ç', '–Ω—É–∂–µ–Ω', 'issues', 'slow'];
    
    if (brokenKeywords.some(keyword => notesLower.includes(keyword))) {
        return 'broken';
    }
    
    if (issuesKeywords.some(keyword => notesLower.includes(keyword))) {
        return 'issues';
    }
    
    return 'working';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç –ª–∏ IP-–∞–¥—Ä–µ—Å
async function isIPInUse(ip, excludeTable = null, excludeId = null) {
    if (!ip) return false;
    const connection = await pool.getConnection();
    try {
        let [rows] = await connection.execute(
            `SELECT id FROM computers WHERE ip_address = ?${excludeTable === 'computers' ? ' AND id <> ?' : ''}`,
            excludeTable === 'computers' ? [ip, excludeId] : [ip]
        );
        if (rows.length > 0) return true;

        [rows] = await connection.execute(
            `SELECT id FROM network_devices WHERE ip_address = ?${excludeTable === 'network_devices' ? ' AND id <> ?' : ''}`,
            excludeTable === 'network_devices' ? [ip, excludeId] : [ip]
        );
        if (rows.length > 0) return true;

        return false;
    } finally {
        connection.release();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π

async function addHistory(table, id, action, beforeData = null, afterData = null) {
    if (!pool) return;
    try {
        const connection = await pool.getConnection();
        const details = JSON.stringify({ before: beforeData, after: afterData });

        await connection.execute(
            'INSERT INTO device_history (device_table, device_id, action, details) VALUES (?, ?, ?, ?)',
            [table, id, action, details]
        );
        connection.release();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const checkDB = (req, res, next) => {
    if (!pool) {
        return res.status(503).json({ 
            error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        });
    }
    next();
};

// === API ENDPOINTS ===

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok',
        database: pool ? 'connected' : 'disconnected',
        timestamp: new Date().toISOString()
    });
});

// –î–æ–±–∞–≤–∏–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/imported-computers', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM imported_computers ORDER BY id DESC LIMIT 50');
        connection.release();
        
        const computers = rows.map(row => ({
            id: row.id,
            inventoryNumber: row.inventory_number,
            building: row.building,
            location: row.location,
            deviceType: row.device_type,
            model: row.model,
            screen: row.screen,
            os: row.os,
            processor: row.processor,
            cores: row.cores,
            ram: row.ram,
            storage: row.storage,
            graphics: row.graphics,
            year: row.year,
            status: row.status,
            importedAt: row.imported_at
        }));
        
        res.json(computers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ imported_computers –≤ computers
app.post('/api/migrate-imported', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const [importedRows] = await connection.execute('SELECT * FROM imported_computers');
        
        let migratedCount = 0;
        const errors = [];
        
        try {
            await connection.beginTransaction();
            
            for (const row of importedRows) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                    const [existing] = await connection.execute(
                        'SELECT id FROM computers WHERE inventory_number = ? AND inventory_number IS NOT NULL',
                        [row.inventory_number]
                    );
                    
                    if (existing.length > 0) {
                        errors.push(`–ö–æ–º–ø—å—é—Ç–µ—Ä —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ${row.inventory_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                        continue;
                    }
                    
                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                    await connection.execute(
                        `INSERT INTO computers 
                         (inventory_number, building, location, device_type, model, processor, ram, storage, graphics, year, status, notes)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            row.inventory_number,
                            row.building,
                            row.location,
                            row.device_type,
                            row.model,
                            row.processor,
                            row.ram,
                            row.storage, 
                            row.graphics,
                            row.year,
                            row.status || 'working',
                            `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Excel (${row.imported_at})`
                        ]
                    );
                    migratedCount++;
                } catch (rowError) {
                    errors.push(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ ID ${row.id}: ${rowError.message}`);
                }
            }
            
            await connection.commit();
            
            res.json({
                success: true,
                migratedCount: migratedCount,
                totalImported: importedRows.length,
                errors: errors.slice(0, 10)
            });
            
        } catch (error) {
            await connection.rollback();
            throw error;
        } finally {
            connection.release();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
app.get('/api/stats', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        
        const [computers] = await connection.execute('SELECT COUNT(*) as count FROM computers');
        const [networkDevices] = await connection.execute('SELECT COUNT(*) as count FROM network_devices');
        const [otherDevices] = await connection.execute('SELECT COUNT(*) as count FROM other_devices');
        const [assignedDevices] = await connection.execute('SELECT COUNT(*) as count FROM assigned_devices');
        const [importedComputers] = await connection.execute('SELECT COUNT(*) as count FROM imported_computers');
        
        connection.release();
        
        res.json({
            computers: computers[0].count,
            network: networkDevices[0].count,
            other: otherDevices[0].count,
            assigned: assignedDevices[0].count,
            imported: importedComputers[0].count
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// === –ö–û–ú–ü–¨–Æ–¢–ï–†–´ ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
app.get('/api/computers', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM computers ORDER BY id DESC');
        connection.release();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º snake_case –≤ camelCase –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const computers = rows.map(row => ({
            id: row.id,
            inventoryNumber: row.inventory_number,
            building: row.building,
            location: row.location,
            deviceType: row.device_type,
            model: row.model,
            processor: row.processor,
            ram: row.ram,
            storage: row.storage,
            graphics: row.graphics,
            ipAddress: row.ip_address,
            computerName: row.computer_name,
            year: row.year,
            notes: row.notes,
            status: row.status
        }));
        
        res.json(computers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
app.post('/api/computers', checkDB, async (req, res) => {
    try {
        const {
            inventoryNumber, building, location, deviceType, model,
            processor, ram, storage, graphics, ipAddress, computerName, year, notes, status: reqStatus
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!building || !location || !deviceType) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: building, location, deviceType' 
            });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const status = reqStatus || getStatusFromNotes(notes);

        if (ipAddress) {
            const inUse = await isIPInUse(ipAddress);
            if (inUse) {
                return res.status(400).json({ error: 'IP-–∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º' });
            }
        }

        const connection = await pool.getConnection();
        const [result] = await connection.execute(
            `INSERT INTO computers (
                inventory_number, building, location, device_type, model,
                processor, ram, storage, graphics, ip_address, computer_name, year, notes, status
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [inventoryNumber || null, building, location, deviceType, model || null,
             processor || null, ram || null, storage || null, graphics || null, 
             ipAddress || null, computerName || null, year || null, notes || null, status]
        );
        connection.release();


        await addHistory('computers', result.insertId, 'create', null, req.body);


        res.json({ id: result.insertId, message: '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
app.put('/api/computers/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const {
            inventoryNumber, building, location, deviceType, model,
            processor, ram, storage, graphics, ipAddress, computerName, year, notes, status: reqStatus
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!building || !location || !deviceType) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: building, location, deviceType' 
            });
        }

        const status = reqStatus || getStatusFromNotes(notes);

        if (ipAddress) {
            const inUse = await isIPInUse(ipAddress, 'computers', id);
            if (inUse) {
                return res.status(400).json({ error: 'IP-–∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º' });
            }
        }

        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM computers WHERE id = ?', [id]);
        await connection.execute(
            `UPDATE computers SET
                inventory_number = ?, building = ?, location = ?, device_type = ?, model = ?,
                processor = ?, ram = ?, storage = ?, graphics = ?, ip_address = ?,
                computer_name = ?, year = ?, notes = ?, status = ?
            WHERE id = ?`,
            [inventoryNumber || null, building, location, deviceType, model || null,
             processor || null, ram || null, storage || null, graphics || null,
             ipAddress || null, computerName || null, year || null, notes || null, status, id]
        );
        connection.release();


        await addHistory('computers', id, 'update', oldRows[0] || null, req.body);


        res.json({ message: '–ö–æ–º–ø—å—é—Ç–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
app.delete('/api/computers/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM computers WHERE id = ?', [id]);
        await connection.execute('DELETE FROM computers WHERE id = ?', [id]);
        connection.release();

        await addHistory('computers', id, 'delete', oldRows[0] || null, null);


        res.json({ message: '–ö–æ–º–ø—å—é—Ç–µ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞' });
    }
});

// === –°–ï–¢–ï–í–´–ï –£–°–¢–†–û–ô–°–¢–í–ê ===

app.get('/api/network-devices', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM network_devices ORDER BY id DESC');
        connection.release();
        
        const devices = rows.map(row => ({
            id: row.id,
            type: row.type,
            model: row.model,
            building: row.building,
            location: row.location,
            ipAddress: row.ip_address,
            login: row.login,
            password: row.password,
            wifiName: row.wifi_name,
            wifiPassword: row.wifi_password,
            notes: row.notes,
            status: row.status
        }));
        
        res.json(devices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤' });
    }
});

app.post('/api/network-devices', checkDB, async (req, res) => {
    try {
        const {
            type, model, building, location, ipAddress, login, password,
            wifiName, wifiPassword, notes, status: reqStatus
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!type || !model || !building || !location || !ipAddress) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        const status = reqStatus || getStatusFromNotes(notes);

        if (ipAddress) {
            const inUse = await isIPInUse(ipAddress);
            if (inUse) {
                return res.status(400).json({ error: 'IP-–∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º' });
            }
        }

        const connection = await pool.getConnection();
        const [result] = await connection.execute(
            `INSERT INTO network_devices (
                type, model, building, location, ip_address, login, password,
                wifi_name, wifi_password, notes, status
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [type, model, building, location, ipAddress, login || null, password || null,
             wifiName || null, wifiPassword || null, notes || null, status]
        );
        connection.release();


        await addHistory('network_devices', result.insertId, 'create', null, req.body);


        res.json({ id: result.insertId, message: '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

app.put('/api/network-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const {
            type, model, building, location, ipAddress, login, password,
            wifiName, wifiPassword, notes, status: reqStatus
        } = req.body;

        if (!type || !model || !building || !location || !ipAddress) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        const status = reqStatus || getStatusFromNotes(notes);

        if (ipAddress) {
            const inUse = await isIPInUse(ipAddress, 'network_devices', id);
            if (inUse) {
                return res.status(400).json({ error: 'IP-–∞–¥—Ä–µ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º' });
            }
        }

        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM network_devices WHERE id = ?', [id]);
        await connection.execute(
            `UPDATE network_devices SET
                type = ?, model = ?, building = ?, location = ?, ip_address = ?,
                login = ?, password = ?, wifi_name = ?, wifi_password = ?, notes = ?, status = ?
            WHERE id = ?`,
            [type, model, building, location, ipAddress, login || null, password || null,
             wifiName || null, wifiPassword || null, notes || null, status, id]
        );
        connection.release();


        await addHistory('network_devices', id, 'update', oldRows[0] || null, req.body);


        res.json({ message: '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

app.delete('/api/network-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM network_devices WHERE id = ?', [id]);
        await connection.execute('DELETE FROM network_devices WHERE id = ?', [id]);
        connection.release();


        await addHistory('network_devices', id, 'delete', oldRows[0] || null, null);


        res.json({ message: '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

// === –î–†–£–ì–ê–Ø –¢–ï–•–ù–ò–ö–ê ===

app.get('/api/other-devices', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM other_devices ORDER BY id DESC');
        connection.release();
        
        const devices = rows.map(row => ({
            id: row.id,
            type: row.type,
            model: row.model,
            building: row.building,
            location: row.location,
            responsible: row.responsible,
            inventoryNumber: row.inventory_number,
            notes: row.notes,
            status: row.status
        }));
        
        res.json(devices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏' });
    }
});

app.post('/api/other-devices', checkDB, async (req, res) => {
    try {
        const {
            type, model, building, location, responsible, inventoryNumber, notes, status: reqStatus
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!type || !model || !building || !location) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        const status = reqStatus || getStatusFromNotes(notes);

        const connection = await pool.getConnection();
        const [result] = await connection.execute(
            `INSERT INTO other_devices (
                type, model, building, location, responsible, inventory_number, notes, status
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
            [type, model, building, location, responsible || null, inventoryNumber || null, notes || null, status]
        );
        connection.release();

        await addHistory('other_devices', result.insertId, 'create', null, req.body);


        res.json({ id: result.insertId, message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

app.put('/api/other-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const {
            type, model, building, location, responsible, inventoryNumber, notes, status: reqStatus
        } = req.body;

        if (!type || !model || !building || !location) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        const status = reqStatus || getStatusFromNotes(notes);

        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM other_devices WHERE id = ?', [id]);
        await connection.execute(
            `UPDATE other_devices SET
                type = ?, model = ?, building = ?, location = ?, responsible = ?,
                inventory_number = ?, notes = ?, status = ?
            WHERE id = ?`,
            [type, model, building, location, responsible || null, inventoryNumber || null, notes || null, status, id]
        );
        connection.release();

        await addHistory('other_devices', id, 'update', oldRows[0] || null, req.body);


        res.json({ message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

app.delete('/api/other-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM other_devices WHERE id = ?', [id]);
        await connection.execute('DELETE FROM other_devices WHERE id = ?', [id]);
        connection.release();


        await addHistory('other_devices', id, 'delete', oldRows[0] || null, null);


        res.json({ message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

// === –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê ===

app.get('/api/assigned-devices', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM assigned_devices ORDER BY id DESC');
        connection.release();
        
        const devices = rows.map(row => ({
            id: row.id,
            employee: row.employee,
            position: row.position,
            building: row.building,
            devices: JSON.parse(row.devices || '[]'),
            assignedDate: row.assigned_date,
            notes: row.notes
        }));
        
        res.json(devices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤' });
    }
});

app.post('/api/assigned-devices', checkDB, async (req, res) => {
    try {
        const {
            employee, position, building, devices, assignedDate, notes
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!employee || !position || !building || !devices || !assignedDate) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ JSON —Å—Ç—Ä–æ–∫—É
        const devicesJson = Array.isArray(devices) ? JSON.stringify(devices) : JSON.stringify([devices]);

        const connection = await pool.getConnection();
        const [result] = await connection.execute(
            `INSERT INTO assigned_devices (
                employee, position, building, devices, assigned_date, notes
            ) VALUES (?, ?, ?, ?, ?, ?)`,
            [employee, position, building, devicesJson, assignedDate, notes || null]
        );
        connection.release();


        await addHistory('assigned_devices', result.insertId, 'create', null, req.body);


        res.json({ id: result.insertId, message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
    }
});

app.put('/api/assigned-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const {
            employee, position, building, devices, assignedDate, notes
        } = req.body;

        if (!employee || !position || !building || !devices || !assignedDate) {
            return res.status(400).json({ 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
            });
        }

        const devicesJson = Array.isArray(devices) ? JSON.stringify(devices) : JSON.stringify([devices]);

        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM assigned_devices WHERE id = ?', [id]);
        await connection.execute(
            `UPDATE assigned_devices SET
                employee = ?, position = ?, building = ?, devices = ?, assigned_date = ?, notes = ?
            WHERE id = ?`,
            [employee, position, building, devicesJson, assignedDate, notes || null, id]
        );
        connection.release();


        await addHistory('assigned_devices', id, 'update', oldRows[0] || null, req.body);


        res.json({ message: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' });
    }
});

app.delete('/api/assigned-devices/:id', checkDB, async (req, res) => {
    try {
        const { id } = req.params;
        const connection = await pool.getConnection();
        const [oldRows] = await connection.execute('SELECT * FROM assigned_devices WHERE id = ?', [id]);
        await connection.execute('DELETE FROM assigned_devices WHERE id = ?', [id]);
        connection.release();


        await addHistory('assigned_devices', id, 'delete', oldRows[0] || null, null);


        res.json({ message: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' });
    }
});

// === –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
app.get('/api/history', checkDB, async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT * FROM device_history ORDER BY id DESC LIMIT 100');
        connection.release();


        const history = rows.map(r => {
            let detailsObj = {};
            try {
                detailsObj = JSON.parse(r.details || '{}');
            } catch (_) {}
            const info = detailsObj.after || detailsObj.before || {};
            const inventoryNumber = info.inventoryNumber || info.inventory_number || '';
            let name = info.model || info.computer_name || info.computerName || info.employee || '';
            if (!name) {
                name = info.type || info.deviceType || '';
            }

            return {
                id: r.id,
                table: r.device_table,
                deviceId: r.device_id,
                inventoryNumber,
                name,
                action: r.action,
                details: detailsObj,
                timestamp: r.timestamp
            };
        });


        res.json(history);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏' });
    }
});

// === –ü–û–ò–°–ö –ü–û –ò–ù–í–ï–ù–¢–ê–†–ù–û–ú–£ –ù–û–ú–ï–†–£ ===

app.get('/api/search-inventory/:number', checkDB, async (req, res) => {
    try {
        const { number } = req.params;
        const connection = await pool.getConnection();
        
        // –ü–æ–∏—Å–∫ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö
        const [computers] = await connection.execute(
            'SELECT *, "computers" as source_table FROM computers WHERE inventory_number = ?',
            [number]
        );
        
        // –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–µ
        const [otherDevices] = await connection.execute(
            'SELECT *, "other_devices" as source_table FROM other_devices WHERE inventory_number = ?',
            [number]
        );
        
        // –ü–æ–∏—Å–∫ –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const [importedComputers] = await connection.execute(
            'SELECT *, "imported_computers" as source_table FROM imported_computers WHERE inventory_number = ?',
            [number]
        );
        
        connection.release();
        
        const allResults = [...computers, ...otherDevices, ...importedComputers];
        
        if (allResults.length > 0) {
            const result = allResults[0];
            let formattedResult;
            
            if (result.source_table === 'computers') {
                formattedResult = {
                    type: 'computers',
                    data: {
                        inventoryNumber: result.inventory_number,
                        building: result.building,
                        location: result.location,
                        deviceType: result.device_type,
                        model: result.model,
                        processor: result.processor,
                        ram: result.ram,
                        storage: result.storage,
                        graphics: result.graphics,
                        year: result.year
                    }
                };
            } else if (result.source_table === 'imported_computers') {
                formattedResult = {
                    type: 'importedComputers',
                    data: {
                        inventoryNumber: result.inventory_number,
                        location: result.location,
                        deviceType: result.device_type,
                        model: result.model,
                        processor: result.processor,
                        ram: result.ram,
                        storage: result.storage,
                        graphics: result.graphics,
                        year: result.year,
                        building: result.building
                    }
                };
            } else {
                formattedResult = {
                    type: 'otherDevices',
                    data: {
                        inventoryNumber: result.inventory_number,
                        type: result.type,
                        model: result.model,
                        building: result.building,
                        location: result.location
                    }
                };
            }
            
            res.json(formattedResult);
        } else {
            res.status(404).json({ message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞' });
    }
});

// === –ò–ú–ü–û–†–¢ EXCEL ===

app.post('/api/import-excel', upload.single('file'), async (req, res) => {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞...');
        
        if (!req.file) {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        console.log('üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', {
            originalname: req.file.originalname,
            size: req.file.size,
            mimetype: req.file.mimetype
        });

        if (!pool) {
            console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return res.status(503).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        const allowedTypes = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
            'application/vnd.ms-excel', // .xls
            'application/octet-stream' // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø
        ];

        if (!allowedTypes.includes(req.file.mimetype)) {
            console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', req.file.mimetype);
            return res.status(400).json({ 
                error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã' 
            });
        }

        let workbook, jsonData;
        
        try {
            console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞...');
            workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
            
            if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
                throw new Error('Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤');
            }
            
            const firstSheetName = workbook.SheetNames[0];
            console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç:', firstSheetName);
            
            const worksheet = workbook.Sheets[firstSheetName];
            jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
            
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ:', jsonData.length);
            
        } catch (xlsxError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', xlsxError);
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: ' + xlsxError.message 
            });
        }

        const connection = await pool.getConnection();
        let importedCount = 0;
        const errors = [];

        try {
            await connection.beginTransaction();
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π...');

            for (let i = 3; i < jsonData.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∏ 0, 1, 2)
                const row = jsonData[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if (!row || row.length === 0 || !row[0] || row[0] === '') {
                    continue;
                }

                try {
                    // –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    const inventoryNumber = normalizeInventoryNumber(row[1]);
                    const location = cleanString(row[2]);
                    const deviceType = normalizeDeviceType(row[3]);
                    const model = cleanString(row[4]);
                    const building = determineBuilding(location);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if (!location || !deviceType) {
                        errors.push(`–°—Ç—Ä–æ–∫–∞ ${i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)`);
                        continue;
                    }
                    
                    console.log(`üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É ${i}: ${inventoryNumber || '–±–µ–∑ –∏–Ω–≤.–Ω–æ–º–µ—Ä–∞'} - ${deviceType} –≤ ${location}`);
                    
                    await connection.execute(
                        `INSERT INTO imported_computers 
                         (inventory_number, location, device_type, model, screen, os, processor, cores, ram, storage, graphics, year, building, status)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            inventoryNumber,                    // inventory_number
                            location,                          // location  
                            deviceType,                        // device_type
                            model,                            // model
                            cleanString(row[5]),              // screen
                            cleanString(row[6]),              // os
                            cleanString(row[7]),              // processor
                            cleanString(row[8]),              // cores
                            cleanString(row[9]),              // ram
                            cleanString(row[10]),             // storage
                            cleanString(row[11]),             // graphics
                            cleanString(row[12]),             // year
                            building,                         // building
                            'working'                         // status
                        ]
                    );
                    importedCount++;
                } catch (rowError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${i}:`, rowError.message);
                    errors.push(`–°—Ç—Ä–æ–∫–∞ ${i}: ${rowError.message}`);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                    if (errors.length > 50) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫
                        console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (${errors.length}), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç`);
                        break;
                    }
                }
            }

            await connection.commit();
            console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${importedCount} –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ${jsonData.length - 3} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö`);
            
            const response = { 
                success: true, 
                count: importedCount,
                totalRows: jsonData.length - 3,
                processedRows: importedCount + errors.length
            };
            
            if (errors.length > 0) {
                response.warnings = errors.slice(0, 10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                response.warningCount = errors.length;
                
                if (errors.length > 10) {
                    response.warnings.push(`... –∏ –µ—â–µ ${errors.length - 10} –æ—à–∏–±–æ–∫`);
                }
                
                response.message = `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –∑–∞–ø–∏—Å–µ–π —Å ${errors.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`;
            } else {
                response.message = `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –∑–∞–ø–∏—Å–µ–π`;
            }
            
            res.json(response);
            
        } catch (error) {
            await connection.rollback();
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:', error);
            throw error;
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message,
            details: error.stack
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
function normalizeDeviceType(type) {
    if (!type) return '–∫–æ–º–ø—å—é—Ç–µ—Ä';
    
    const typeStr = type.toString().toLowerCase().trim();
    const typeMap = {
        '–∫–æ–º–ø—å—é—Ç–µ—Ä': '–∫–æ–º–ø—å—é—Ç–µ—Ä',
        '–Ω–æ—É—Ç–±—É–∫': '–Ω–æ—É—Ç–±—É–∫', 
        '–Ω–µ—Ç–±—É–∫': '–Ω–µ—Ç–±—É–∫'
    };
    
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (typeMap[typeStr]) {
        return typeMap[typeStr];
    }
    
    // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (typeStr.includes('–Ω–æ—É—Ç–±—É–∫')) return '–Ω–æ—É—Ç–±—É–∫';
    if (typeStr.includes('–Ω–µ—Ç–±—É–∫')) return '–Ω–µ—Ç–±—É–∫';
    if (typeStr.includes('–∫–æ–º–ø—å—é—Ç–µ—Ä')) return '–∫–æ–º–ø—å—é—Ç–µ—Ä';
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return '–∫–æ–º–ø—å—é—Ç–µ—Ä';
}

function determineBuilding(location) {
    if (!location) return '–≥–ª–∞–≤–Ω—ã–π';
    
    const locationStr = location.toString().toLowerCase();
    if (locationStr.includes('–º–µ–¥') || locationStr.includes('–ú–ï–î')) {
        return '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π';
    }
    return '–≥–ª–∞–≤–Ω—ã–π';
}

function cleanString(str) {
    if (!str) return null;
    const cleaned = str.toString().trim();
    return cleaned === '' ? null : cleaned;
}

function normalizeInventoryNumber(number) {
    if (!number) return null;
    
    const numberStr = number.toString().trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (numberStr === '' || 
        numberStr.toLowerCase().includes('–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ') ||
        numberStr.toLowerCase().includes('—Ä–∞–∑–¥–µ–≤–∞–ª–∫–∞')) {
        return null;
    }
    
    return numberStr;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
    res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
        const dbConnected = await createPool();
        
        if (dbConnected) {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            await initDatabase();
        } else {
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
        }
        
        app.listen(PORT, () => {
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
            console.log(`üìä –°—Ç–∞—Ç—É—Å –ë–î: ${dbConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
            console.log('üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ public/');
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startServer();